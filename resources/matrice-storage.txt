For the general storage of the matrix, I chose to not store the diagonal element on the last position,
as it didn't help me with the algorithm at all. Instead, all elements are sorted by columnIndex.

For the matrix given as an example, it would be stored this way:
{{(102.5, 1), (2.5, 3)},
 {(3.5, 1),  (104.88, 2), (1.05, 3), (0.33, 5)},
  {(100.0, 3}},
  { (1.3, 2), (101.3, 4)},
  { (0.73, 1), (1.5, 4), (102.23, 5)} }.


Aditionally, when multiplying, the second matrix is expressed by columns instead of rows - more natural to do the
computation this way. Also, the elements are sorted by their row index.

For the matrix given as an example, it would be stored this way:

{{102.5, 1), (3.5, 1), (0.73, 1)},
{(104.88, 2), (1.3, 2)},
{(2.5, 3), (1.05, 3), (100.0, 3)},
{(101.3, 4), (1.5, 4)],
{(0.33, 5), (102.23, 5)}}